// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CarRentalServices_GetCars_FullMethodName      = "/api.CarRentalServices/GetCars"
	CarRentalServices_CreateCar_FullMethodName    = "/api.CarRentalServices/CreateCar"
	CarRentalServices_GetCarById_FullMethodName   = "/api.CarRentalServices/GetCarById"
	CarRentalServices_UpdateCar_FullMethodName    = "/api.CarRentalServices/UpdateCar"
	CarRentalServices_DeleteCar_FullMethodName    = "/api.CarRentalServices/DeleteCar"
	CarRentalServices_GetOrders_FullMethodName    = "/api.CarRentalServices/GetOrders"
	CarRentalServices_CreateOrder_FullMethodName  = "/api.CarRentalServices/CreateOrder"
	CarRentalServices_GetOrderById_FullMethodName = "/api.CarRentalServices/GetOrderById"
	CarRentalServices_UpdateOrder_FullMethodName  = "/api.CarRentalServices/UpdateOrder"
	CarRentalServices_DeleteOrder_FullMethodName  = "/api.CarRentalServices/DeleteOrder"
)

// CarRentalServicesClient is the client API for CarRentalServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarRentalServicesClient interface {
	GetCars(ctx context.Context, in *GetCarsRequest, opts ...grpc.CallOption) (*GetCarsResponse, error)
	CreateCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*Car, error)
	GetCarById(ctx context.Context, in *Car, opts ...grpc.CallOption) (*Car, error)
	UpdateCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*Car, error)
	DeleteCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*Car, error)
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	GetOrderById(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	UpdateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	DeleteOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
}

type carRentalServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewCarRentalServicesClient(cc grpc.ClientConnInterface) CarRentalServicesClient {
	return &carRentalServicesClient{cc}
}

func (c *carRentalServicesClient) GetCars(ctx context.Context, in *GetCarsRequest, opts ...grpc.CallOption) (*GetCarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCarsResponse)
	err := c.cc.Invoke(ctx, CarRentalServices_GetCars_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carRentalServicesClient) CreateCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*Car, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Car)
	err := c.cc.Invoke(ctx, CarRentalServices_CreateCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carRentalServicesClient) GetCarById(ctx context.Context, in *Car, opts ...grpc.CallOption) (*Car, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Car)
	err := c.cc.Invoke(ctx, CarRentalServices_GetCarById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carRentalServicesClient) UpdateCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*Car, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Car)
	err := c.cc.Invoke(ctx, CarRentalServices_UpdateCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carRentalServicesClient) DeleteCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*Car, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Car)
	err := c.cc.Invoke(ctx, CarRentalServices_DeleteCar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carRentalServicesClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, CarRentalServices_GetOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carRentalServicesClient) CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, CarRentalServices_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carRentalServicesClient) GetOrderById(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, CarRentalServices_GetOrderById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carRentalServicesClient) UpdateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, CarRentalServices_UpdateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carRentalServicesClient) DeleteOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, CarRentalServices_DeleteOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarRentalServicesServer is the server API for CarRentalServices service.
// All implementations must embed UnimplementedCarRentalServicesServer
// for forward compatibility.
type CarRentalServicesServer interface {
	GetCars(context.Context, *GetCarsRequest) (*GetCarsResponse, error)
	CreateCar(context.Context, *Car) (*Car, error)
	GetCarById(context.Context, *Car) (*Car, error)
	UpdateCar(context.Context, *Car) (*Car, error)
	DeleteCar(context.Context, *Car) (*Car, error)
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	CreateOrder(context.Context, *Order) (*Order, error)
	GetOrderById(context.Context, *Order) (*Order, error)
	UpdateOrder(context.Context, *Order) (*Order, error)
	DeleteOrder(context.Context, *Order) (*Order, error)
	mustEmbedUnimplementedCarRentalServicesServer()
}

// UnimplementedCarRentalServicesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCarRentalServicesServer struct{}

func (UnimplementedCarRentalServicesServer) GetCars(context.Context, *GetCarsRequest) (*GetCarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCars not implemented")
}
func (UnimplementedCarRentalServicesServer) CreateCar(context.Context, *Car) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCar not implemented")
}
func (UnimplementedCarRentalServicesServer) GetCarById(context.Context, *Car) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarById not implemented")
}
func (UnimplementedCarRentalServicesServer) UpdateCar(context.Context, *Car) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCar not implemented")
}
func (UnimplementedCarRentalServicesServer) DeleteCar(context.Context, *Car) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCar not implemented")
}
func (UnimplementedCarRentalServicesServer) GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedCarRentalServicesServer) CreateOrder(context.Context, *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedCarRentalServicesServer) GetOrderById(context.Context, *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedCarRentalServicesServer) UpdateOrder(context.Context, *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedCarRentalServicesServer) DeleteOrder(context.Context, *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedCarRentalServicesServer) mustEmbedUnimplementedCarRentalServicesServer() {}
func (UnimplementedCarRentalServicesServer) testEmbeddedByValue()                           {}

// UnsafeCarRentalServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarRentalServicesServer will
// result in compilation errors.
type UnsafeCarRentalServicesServer interface {
	mustEmbedUnimplementedCarRentalServicesServer()
}

func RegisterCarRentalServicesServer(s grpc.ServiceRegistrar, srv CarRentalServicesServer) {
	// If the following call pancis, it indicates UnimplementedCarRentalServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CarRentalServices_ServiceDesc, srv)
}

func _CarRentalServices_GetCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRentalServicesServer).GetCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarRentalServices_GetCars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRentalServicesServer).GetCars(ctx, req.(*GetCarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarRentalServices_CreateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRentalServicesServer).CreateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarRentalServices_CreateCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRentalServicesServer).CreateCar(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarRentalServices_GetCarById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRentalServicesServer).GetCarById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarRentalServices_GetCarById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRentalServicesServer).GetCarById(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarRentalServices_UpdateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRentalServicesServer).UpdateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarRentalServices_UpdateCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRentalServicesServer).UpdateCar(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarRentalServices_DeleteCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRentalServicesServer).DeleteCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarRentalServices_DeleteCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRentalServicesServer).DeleteCar(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarRentalServices_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRentalServicesServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarRentalServices_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRentalServicesServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarRentalServices_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRentalServicesServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarRentalServices_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRentalServicesServer).CreateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarRentalServices_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRentalServicesServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarRentalServices_GetOrderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRentalServicesServer).GetOrderById(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarRentalServices_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRentalServicesServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarRentalServices_UpdateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRentalServicesServer).UpdateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarRentalServices_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRentalServicesServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarRentalServices_DeleteOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRentalServicesServer).DeleteOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

// CarRentalServices_ServiceDesc is the grpc.ServiceDesc for CarRentalServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarRentalServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.CarRentalServices",
	HandlerType: (*CarRentalServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCars",
			Handler:    _CarRentalServices_GetCars_Handler,
		},
		{
			MethodName: "CreateCar",
			Handler:    _CarRentalServices_CreateCar_Handler,
		},
		{
			MethodName: "GetCarById",
			Handler:    _CarRentalServices_GetCarById_Handler,
		},
		{
			MethodName: "UpdateCar",
			Handler:    _CarRentalServices_UpdateCar_Handler,
		},
		{
			MethodName: "DeleteCar",
			Handler:    _CarRentalServices_DeleteCar_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _CarRentalServices_GetOrders_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _CarRentalServices_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _CarRentalServices_GetOrderById_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _CarRentalServices_UpdateOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _CarRentalServices_DeleteOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
